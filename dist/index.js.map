{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import FormData from 'form-data';\nimport fs from 'fs';\nimport got, { GotBodyOptions, GotFormOptions, GotJSONOptions, Response } from 'got';\nimport { Cookie } from 'tough-cookie';\nimport urljoin from 'url-join';\nimport { hash } from '@ctrl/torrent-file';\n\nimport {\n  AllClientData,\n  Label,\n  NormalizedTorrent,\n  TorrentClient,\n  TorrentSettings,\n  TorrentState,\n  AddTorrentOptions as NormalizedAddTorrentOptions,\n} from '@ctrl/shared-torrent';\n\nimport {\n  AddTorrentOptions,\n  Torrent,\n  TorrentFile,\n  TorrentFilePriority,\n  TorrentFilters,\n  TorrentPieceState,\n  TorrentProperties,\n  TorrentState as qbtState,\n  TorrentTrackers,\n  WebSeed,\n} from './types';\n\nconst defaults: TorrentSettings = {\n  baseUrl: 'http://localhost:9091/',\n  path: '/api/v2',\n  username: '',\n  password: '',\n  timeout: 5000,\n};\n\nexport class QBittorrent implements TorrentClient {\n  config: TorrentSettings;\n\n  /**\n   * auth cookie\n   */\n  private _sid?: string;\n\n  constructor(options: Partial<TorrentSettings> = {}) {\n    this.config = { ...defaults, ...options };\n  }\n\n  /**\n   * Get application version\n   */\n  async version(): Promise<string> {\n    const res = await this.request<string>(\n      '/app/version',\n      'GET',\n      undefined,\n      undefined,\n      undefined,\n      false,\n    );\n    return res.body;\n  }\n\n  async getTorrent(hash: string): Promise<NormalizedTorrent> {\n    const torrentsResponse = await this.listTorrents(hash);\n    const torrentData = torrentsResponse[0];\n    if (!torrentData) {\n      throw new Error('Torrent not found');\n    }\n\n    return this._normalizeTorrentData(torrentData);\n  }\n\n  /**\n   * Torrents list\n   * @param hashes Filter by torrent hashes\n   * @param [filter] Filter torrent list\n   * @param category Get torrents with the given category (empty string means \"without category\"; no \"category\" parameter means \"any category\")\n   * @returns list of torrents\n   */\n  async listTorrents(\n    hashes?: string | string[],\n    filter?: TorrentFilters,\n    category?: string,\n  ): Promise<Torrent[]> {\n    const params: any = {};\n    if (hashes) {\n      params.hashes = this._normalizeHashes(hashes);\n    }\n\n    if (filter) {\n      params.filter = filter;\n    }\n\n    if (category) {\n      params.category = category;\n    }\n\n    const res = await this.request<Torrent[]>('/torrents/info', 'GET', params);\n    return res.body;\n  }\n\n  async getAllData(): Promise<AllClientData> {\n    const listTorrents = await this.listTorrents();\n    const results: AllClientData = {\n      torrents: [],\n      labels: [],\n    };\n    const labels: { [key: string]: Label } = {};\n    for (const torrent of listTorrents) {\n      const torrentData: NormalizedTorrent = this._normalizeTorrentData(torrent);\n      results.torrents.push(torrentData);\n\n      // setup label\n      if (torrentData.label) {\n        if (labels[torrentData.label] === undefined) {\n          labels[torrentData.label] = {\n            id: torrentData.label,\n            name: torrentData.label,\n            count: 1,\n          };\n        } else {\n          labels[torrentData.label].count += 1;\n        }\n      }\n    }\n\n    return results;\n  }\n\n  async torrentProperties(hash: string): Promise<TorrentProperties> {\n    const res = await this.request<TorrentProperties>('/torrents/properties', 'GET', { hash });\n    return res.body;\n  }\n\n  async torrentTrackers(hash: string): Promise<TorrentTrackers[]> {\n    const res = await this.request<TorrentTrackers[]>('/torrents/trackers', 'GET', { hash });\n    return res.body;\n  }\n\n  async torrentWebSeeds(hash: string): Promise<WebSeed[]> {\n    const res = await this.request<WebSeed[]>('/torrents/webseeds', 'GET', { hash });\n    return res.body;\n  }\n\n  async torrentFiles(hash: string): Promise<TorrentFile[]> {\n    const res = await this.request<TorrentFile[]>('/torrents/files', 'GET', { hash });\n    return res.body;\n  }\n\n  async setFilePriority(\n    hash: string,\n    fileIds: string | string[],\n    priority: TorrentFilePriority,\n  ): Promise<TorrentFile[]> {\n    const res = await this.request<TorrentFile[]>('/torrents/filePrio', 'GET', {\n      hash,\n      id: this._normalizeHashes(fileIds),\n      priority,\n    });\n    return res.body;\n  }\n\n  async torrentPieceStates(hash: string): Promise<TorrentPieceState[]> {\n    const res = await this.request<TorrentPieceState[]>('/torrents/pieceStates', 'GET', { hash });\n    return res.body;\n  }\n\n  /**\n   * Torrents piece hashes\n   * @returns an array of hashes (strings) of all pieces (in order) of a specific torrent\n   */\n  async torrentPieceHashes(hash: string): Promise<string[]> {\n    const res = await this.request<string[]>('/torrents/pieceHashes', 'GET', { hash });\n    return res.body;\n  }\n\n  async setTorrentLocation(hashes: string | string[] | 'all', location: string): Promise<boolean> {\n    const body = {\n      hashes: this._normalizeHashes(hashes),\n      location,\n    };\n    await this.request('/torrents/setLocation', 'POST', undefined, body);\n    return true;\n  }\n\n  async setTorrentName(hashes: string | string[] | 'all', name: string): Promise<boolean> {\n    const body = {\n      hashes: this._normalizeHashes(hashes),\n      name,\n    };\n    await this.request('/torrents/rename', 'POST', undefined, body);\n    return true;\n  }\n\n  async createCategory(category: string): Promise<boolean> {\n    const body = {\n      category,\n    };\n    await this.request('/torrents/createCategory', 'POST', undefined, body);\n    return true;\n  }\n\n  async removeCategory(category: string): Promise<boolean> {\n    const body = {\n      category,\n    };\n    await this.request('/torrents/removeCategories', 'POST', undefined, body);\n    return true;\n  }\n\n  async setTorrentCategory(hashes: string | string[] | 'all', category: string): Promise<boolean> {\n    const body = {\n      hashes: this._normalizeHashes(hashes),\n      category,\n    };\n    await this.request('/torrents/setCategory', 'POST', undefined, body);\n    return true;\n  }\n\n  async pauseTorrent(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/pause', 'GET', params);\n    return true;\n  }\n\n  async resumeTorrent(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/resume', 'GET', params);\n    return true;\n  }\n\n  /**\n   * @link https://github.com/qbittorrent/qBittorrent/wiki/Web-API-Documentation#delete-torrents\n   */\n  async removeTorrent(hashes: string | string[] | 'all', deleteFiles = true): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n      deleteFiles,\n    };\n    await this.request('/torrents/delete', 'GET', params);\n    return true;\n  }\n\n  async recheckTorrent(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/recheck', 'GET', params);\n    return true;\n  }\n\n  async reannounceTorrent(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/reannounce', 'GET', params);\n    return true;\n  }\n\n  async addTorrent(\n    torrent: string | Buffer,\n    options: Partial<AddTorrentOptions> = {},\n  ): Promise<boolean> {\n    const form = new FormData();\n    const fileOptions: FormData.AppendOptions = {\n      contentType: 'application/x-bittorrent',\n      filename: options.filename || 'torrent',\n    };\n\n    // remove options.filename, not used in form\n    if (options.filename) {\n      delete options.filename;\n    }\n\n    if (typeof torrent === 'string') {\n      if (fs.existsSync(torrent)) {\n        form.append('file', Buffer.from(fs.readFileSync(torrent)), fileOptions);\n      } else {\n        form.append('file', Buffer.from(torrent, 'base64'), fileOptions);\n      }\n    } else {\n      form.append('file', torrent, fileOptions);\n    }\n\n    if (options) {\n      for (const key of Object.keys(options)) {\n        form.append(key, options[key]);\n      }\n    }\n\n    const res = await this.request<string>(\n      '/torrents/add',\n      'POST',\n      undefined,\n      form,\n      form.getHeaders(),\n      false,\n    );\n\n    if (res.body === 'Fails.') {\n      throw new Error('Failed to add torrent');\n    }\n\n    return true;\n  }\n\n  async normalizedAddTorrent(\n    torrent: string | Buffer,\n    options: Partial<NormalizedAddTorrentOptions> = {},\n  ): Promise<NormalizedTorrent> {\n    const torrentOptions: Partial<AddTorrentOptions> = {};\n\n    if (options.startPaused) {\n      torrentOptions.paused = 'true';\n    }\n\n    if (options.label) {\n      torrentOptions.category = options.label;\n    }\n\n    if (!Buffer.isBuffer(torrent)) {\n      torrent = Buffer.from(torrent);\n    }\n\n    const torrentHash = await hash(torrent);\n    await this.addTorrent(torrent, torrentOptions);\n    return this.getTorrent(torrentHash);\n  }\n\n  async addTrackers(hash: string, urls: string): Promise<boolean> {\n    const params = { hash, urls };\n    await this.request('/torrents/addTrackers', 'GET', params);\n    return true;\n  }\n\n  async editTrackers(hash: string, origUrl: string, newUrl: string): Promise<boolean> {\n    const params = { hash, origUrl, newUrl };\n    await this.request('/torrents/editTrackers', 'GET', params);\n    return true;\n  }\n\n  async removeTrackers(hash: string, urls: string): Promise<boolean> {\n    const params = { hash, urls };\n    await this.request('/torrents/editTrackers', 'GET', params);\n    return true;\n  }\n\n  async queueUp(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/increasePrio', 'GET', params);\n    return true;\n  }\n\n  async queueDown(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/decreasePrio', 'GET', params);\n    return true;\n  }\n\n  async topPriority(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/topPrio', 'GET', params);\n    return true;\n  }\n\n  async bottomPriority(hashes: string | string[] | 'all'): Promise<boolean> {\n    const params = {\n      hashes: this._normalizeHashes(hashes),\n    };\n    await this.request('/torrents/bottomPrio', 'GET', params);\n    return true;\n  }\n\n  async login(): Promise<boolean> {\n    const url = urljoin(this.config.baseUrl, this.config.path, '/auth/login');\n    const options: GotFormOptions<null> = {\n      form: true,\n      body: {\n        username: this.config.username,\n        password: this.config.password,\n      },\n      followRedirect: false,\n      retry: 0,\n    };\n\n    // allow proxy agent\n    if (this.config.agent) {\n      options.agent = this.config.agent;\n    }\n\n    if (this.config.timeout) {\n      options.timeout = this.config.timeout;\n    }\n\n    const res = await got.post(url, options);\n    if (!res.headers['set-cookie'] || !res.headers['set-cookie'].length) {\n      throw new Error('Cookie not found. Auth Failed.');\n    }\n\n    const cookie = Cookie.parse(res.headers['set-cookie'][0]);\n    if (!cookie ||  (cookie.key !== 'SID' && cookie.key !== 'QB_SID')) {\n      throw new Error('Invalid cookie');\n    }\n\n    this._sid = cookie.value;\n    return true;\n  }\n\n  logout(): boolean {\n    this._sid = undefined;\n    return true;\n  }\n\n  // eslint-disable-next-line max-params\n  async request<T extends object | string>(\n    path: string,\n    method: string,\n    params: any = {},\n    body?: any,\n    headers: any = {},\n    json = true,\n  ): Promise<Response<T>> {\n    if (!this._sid) {\n      const authed = await this.login();\n      if (!authed) {\n        throw new Error('Auth Failed');\n      }\n    }\n\n    const url = urljoin(this.config.baseUrl, this.config.path, path);\n    const options: GotJSONOptions | GotBodyOptions<null> = {\n      method,\n      headers: {\n        Cookie: `QB_SID=${this._sid};SID=${this._sid}`,\n        ...headers,\n      },\n      retry: 0,\n      json,\n      body,\n      query: params,\n    };\n\n    // allow proxy agent\n    if (this.config.agent) {\n      options.agent = this.config.agent;\n    }\n\n    if (this.config.timeout) {\n      options.timeout = this.config.timeout;\n    }\n\n    return got(url, options as any);\n  }\n\n  /**\n   * Normalizes hashes\n   * @returns hashes as string seperated by `|`\n   */\n  private _normalizeHashes(hashes: string | string[]): string {\n    if (Array.isArray(hashes)) {\n      return hashes.join('|');\n    }\n\n    return hashes;\n  }\n\n  private _normalizeTorrentData(torrent: Torrent): NormalizedTorrent {\n    let state = TorrentState.unknown;\n\n    switch (torrent.state) {\n      case qbtState.ForcedDL:\n      case qbtState.MetaDL:\n        state = TorrentState.downloading;\n        break;\n      case qbtState.Allocating:\n        // state = 'stalledDL';\n        state = TorrentState.queued;\n        break;\n      case qbtState.ForcedUP:\n        state = TorrentState.seeding;\n        break;\n      case qbtState.PausedDL:\n        state = TorrentState.paused;\n        break;\n      case qbtState.PausedUP:\n        // state = 'completed';\n        state = TorrentState.paused;\n        break;\n      case qbtState.QueuedDL:\n      case qbtState.QueuedUP:\n        state = TorrentState.queued;\n        break;\n      case qbtState.CheckingDL:\n      case qbtState.CheckingUP:\n      case qbtState.QueuedForChecking:\n      case qbtState.CheckingResumeData:\n      case qbtState.Moving:\n        state = TorrentState.checking;\n        break;\n      case qbtState.Unknown:\n      case qbtState.MissingFiles:\n        state = TorrentState.error;\n        break;\n      default:\n        break;\n    }\n\n    const isCompleted = torrent.progress >= 100;\n\n    const result: NormalizedTorrent = {\n      id: torrent.hash,\n      name: torrent.name,\n      stateMessage: '',\n      state,\n      dateAdded: new Date(torrent.added_on * 1000).toISOString(),\n      isCompleted,\n      progress: torrent.progress,\n      label: torrent.category,\n      dateCompleted: new Date(torrent.completion_on * 1000).toISOString(),\n      savePath: torrent.save_path,\n      uploadSpeed: torrent.upspeed,\n      downloadSpeed: torrent.dlspeed,\n      eta: torrent.eta,\n      queuePosition: torrent.priority,\n      connectedPeers: torrent.num_leechs,\n      connectedSeeds: torrent.num_seeds,\n      totalPeers: torrent.num_incomplete,\n      totalSeeds: torrent.num_complete,\n      totalSelected: torrent.size,\n      totalSize: torrent.total_size,\n      totalUploaded: torrent.uploaded,\n      totalDownloaded: torrent.downloaded,\n      ratio: torrent.ratio,\n    };\n    return result;\n  }\n}\n"]}