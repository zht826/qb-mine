{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;AAmLA,IAAY,YAyDX;AAzDD,WAAY,YAAY;IACtB;;OAEG;IACH,+BAAe,CAAA;IACf;;OAEG;IACH,qCAAqB,CAAA;IACrB;;OAEG;IACH,qCAAqB,CAAA;IACrB;;OAEG;IACH,qCAAqB,CAAA;IACrB;;OAEG;IACH,qCAAqB,CAAA;IACrB;;OAEG;IACH,uCAAuB,CAAA;IACvB;;OAEG;IACH,uCAAuB,CAAA;IACvB;;OAEG;IACH,yCAAyB,CAAA;IACzB;;OAEG;IACH,yCAAyB,CAAA;IACzB;;OAEG;IACH,2CAA2B,CAAA;IAC3B;;OAEG;IACH,uCAAuB,CAAA;IACvB,qCAAqB,CAAA;IACrB,qCAAqB,CAAA;IACrB;;OAEG;IACH,iCAAiB,CAAA;IACjB,yCAAyB,CAAA;IACzB,uDAAuC,CAAA;IACvC,yDAAyC,CAAA;IACzC,iCAAiB,CAAA;IACjB,mCAAmB,CAAA;IACnB,6CAA6B,CAAA;AAC/B,CAAC,EAzDW,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAyDvB;AA4KD,IAAY,oBAqBX;AArBD,WAAY,oBAAoB;IAC9B;;OAEG;IACH,uEAAY,CAAA;IACZ;;OAEG;IACH,qEAAW,CAAA;IACX;;OAEG;IACH,uEAAY,CAAA;IACZ;;OAEG;IACH,qEAAW,CAAA;IACX;;OAEG;IACH,qEAAW,CAAA;AACb,CAAC,EArBW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAqB/B;AAwCD,IAAY,mBAiBX;AAjBD,WAAY,mBAAmB;IAC7B;;OAEG;IACH,6DAAQ,CAAA;IACR;;OAEG;IACH,iFAAkB,CAAA;IAClB;;OAEG;IACH,6EAAgB,CAAA;IAChB;;OAEG;IACH,2EAAe,CAAA;AACjB,CAAC,EAjBW,mBAAmB,GAAnB,2BAAmB,KAAnB,2BAAmB,QAiB9B;AAED,IAAY,iBAaX;AAbD,WAAY,iBAAiB;IAC3B;;OAEG;IACH,2EAAiB,CAAA;IACjB;;OAEG;IACH,mEAAa,CAAA;IACb;;OAEG;IACH,qEAAc,CAAA;AAChB,CAAC,EAbW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAa5B","sourcesContent":["/* eslint-disable @typescript-eslint/camelcase */\nexport interface BuildInfo {\n  /**\n   * \tQT version\n   */\n  qt: string;\n  /**\n   * \tlibtorrent version\n   */\n  libtorrent: string;\n  /**\n   * \tBoost version\n   */\n  boost: string;\n  /**\n   * \tOpenSSL version\n   */\n  openssl: string;\n  /**\n   * \tApplication bitness (e.g. 64-bit)\n   */\n  bitness: string;\n}\n\nexport type TorrentFilters =\n  | 'all'\n  | 'downloading'\n  | 'completed'\n  | 'paused'\n  | 'active'\n  | 'inactive'\n  | 'resumed';\n\nexport interface Torrent {\n  /**\n   * Torrent name\n   */\n  name: string;\n  hash: string;\n  magnet_uri: string;\n  /**\n   * datetime in seconds\n   */\n  added_on: number;\n  /**\n   * Torrent size\n   */\n  size: number;\n  /**\n   * Torrent progress\n   */\n  progress: number;\n  /**\n   * Torrent download speed (bytes/s)\n   */\n  dlspeed: number;\n  /**\n   * Torrent upload speed (bytes/s)\n   */\n  upspeed: number;\n  /**\n   * Torrent priority (-1 if queuing is disabled)\n   */\n  priority: number;\n  /**\n   * Torrent seeds connected to\n   */\n  num_seeds: number;\n  /**\n   * Torrent seeds in the swarm\n   */\n  num_complete: number;\n  /**\n   * Torrent leechers connected to\n   */\n  num_leechs: number;\n  /**\n   * Torrent leechers in the swarm\n   */\n  num_incomplete: number;\n  /**\n   * Torrent share ratio\n   */\n  ratio: number;\n  /**\n   * Torrent ETA\n   */\n  eta: number;\n  /**\n   * Torrent state\n   */\n  state: TorrentState;\n  /**\n   * Torrent sequential download state\n   */\n  seq_dl: boolean;\n  /**\n   * Torrent first last piece priority state\n   */\n  f_l_piece_prio: boolean;\n  /**\n   * Torrent copletion datetime in seconds\n   */\n  completion_on: number;\n  /**\n   * Torrent tracker\n   */\n  tracker: string;\n  /**\n   * Torrent download limit\n   */\n  dl_limit: number;\n  /**\n   * Torrent upload limit\n   */\n  up_limit: number;\n  /**\n   * Amount of data downloaded\n   */\n  downloaded: number;\n  /**\n   * Amount of data uploaded\n   */\n  uploaded: number;\n  /**\n   * Amount of data downloaded since program open\n   */\n  downloaded_session: number;\n  /**\n   * Amount of data uploaded since program open\n   */\n  uploaded_session: number;\n  /**\n   * Amount of data left to download\n   */\n  amount_left: number;\n  /**\n   * Torrent save path\n   */\n  save_path: string;\n  /**\n   * Amount of data completed\n   */\n  completed: number;\n  /**\n   * Upload max share ratio\n   */\n  max_ratio: number;\n  /**\n   * Upload max seeding time\n   */\n  max_seeding_time: number;\n  /**\n   * Upload share ratio limit\n   */\n  ratio_limit: number;\n  /**\n   * Upload seeding time limit\n   */\n  seeding_time_limit: number;\n  /**\n   * Indicates the time when the torrent was last seen complete/whole\n   */\n  seen_complete: number;\n  /**\n   * Last time when a chunk was downloaded/uploaded\n   */\n  last_activity: number;\n  /**\n   * Size including unwanted data\n   */\n  total_size: number;\n  time_active: number;\n  /**\n   * Category name\n   */\n  category: string;\n}\n\nexport enum TorrentState {\n  /**\n   * Some error occurred, applies to paused torrents\n   */\n  Error = 'error',\n  /**\n   * Torrent is paused and has finished downloading\n   */\n  PausedUP = 'pausedUP',\n  /**\n   * Torrent is paused and has NOT finished downloading\n   */\n  PausedDL = 'pausedDL',\n  /**\n   * Queuing is enabled and torrent is queued for upload\n   */\n  QueuedUP = 'queuedUP',\n  /**\n   * Queuing is enabled and torrent is queued for download\n   */\n  QueuedDL = 'queuedDL',\n  /**\n   * Torrent is being seeded and data is being transferred\n   */\n  Uploading = 'uploading',\n  /**\n   * Torrent is being seeded, but no connection were made\n   */\n  StalledUP = 'stalledUP',\n  /**\n   * Torrent has finished downloading and is being checked; this status also applies to preallocation (if enabled) and checking resume data on qBt startup\n   */\n  CheckingUP = 'checkingUP',\n  /**\n   * Same as checkingUP, but torrent has NOT finished downloading\n   */\n  CheckingDL = 'checkingDL',\n  /**\n   * Torrent is being downloaded and data is being transferred\n   */\n  Downloading = 'downloading',\n  /**\n   * Torrent is being downloaded, but no connection were made\n   */\n  StalledDL = 'stalledDL',\n  ForcedDL = 'forcedDL',\n  ForcedUP = 'forcedUP',\n  /**\n   * Torrent has just started downloading and is fetching metadata\n   */\n  MetaDL = 'metaDL',\n  Allocating = 'allocating',\n  QueuedForChecking = 'queuedForChecking',\n  CheckingResumeData = 'checkingResumeData',\n  Moving = 'moving',\n  Unknown = 'unknown',\n  MissingFiles = 'missingFiles',\n}\n\nexport interface TorrentProperties {\n  /**\n   * Torrent save path\n   */\n  save_path: string;\n  /**\n   * Torrent creation date (Unix timestamp)\n   */\n  creation_date: number;\n  /**\n   * Torrent piece size (bytes)\n   */\n  piece_size: number;\n  /**\n   * Torrent comment\n   */\n  comment: string;\n  /**\n   * Total data wasted for torrent (bytes)\n   */\n  total_wasted: number;\n  /**\n   * Total data uploaded for torrent (bytes)\n   */\n  total_uploaded: number;\n  /**\n   * Total data uploaded this session (bytes)\n   */\n  total_uploaded_session: number;\n  /**\n   * Total data uploaded for torrent (bytes)\n   */\n  total_downloaded: number;\n  /**\n   * Total data downloaded this session (bytes)\n   */\n  total_downloaded_session: number;\n  /**\n   * Torrent upload limit (bytes/s)\n   */\n  up_limit: number;\n  /**\n   * Torrent download limit (bytes/s)\n   */\n  dl_limit: number;\n  /**\n   * Torrent elapsed time (seconds)\n   */\n  time_elapsed: number;\n  /**\n   * Torrent elapsed time while complete (seconds)\n   */\n  seeding_time: number;\n  /**\n   * Torrent connection count\n   */\n  nb_connections: number;\n  /**\n   * Torrent connection count limit\n   */\n  nb_connections_limit: number;\n  /**\n   * Torrent share ratio\n   */\n  share_ratio: number;\n  /**\n   * When this torrent was added (unix timestamp)\n   */\n  addition_date: number;\n  /**\n   * Torrent completion date (unix timestamp)\n   */\n  completion_date: number;\n  /**\n   * Torrent creator\n   */\n  created_by: string;\n  /**\n   * Torrent average download speed (bytes/second)\n   */\n  dl_speed_avg: number;\n  /**\n   * Torrent download speed (bytes/second)\n   */\n  dl_speed: number;\n  /**\n   * Torrent ETA (seconds)\n   */\n  eta: number;\n  /**\n   * Last seen complete date (unix timestamp)\n   */\n  last_seen: number;\n  /**\n   * Number of peers connected to\n   */\n  peers: number;\n  /**\n   * Number of peers in the swarm\n   */\n  peers_total: number;\n  /**\n   * Number of pieces owned\n   */\n  pieces_have: number;\n  /**\n   * Number of pieces of the torrent\n   */\n  pieces_num: number;\n  /**\n   * Number of seconds until the next announce\n   */\n  reannounce: number;\n  /**\n   * Number of seeds connected to\n   */\n  seeds: number;\n  /**\n   * Number of seeds in the swarm\n   */\n  seeds_total: number;\n  /**\n   * Torrent total size (bytes)\n   */\n  total_size: number;\n  /**\n   * Torrent average upload speed (bytes/second)\n   */\n  up_speed_avg: number;\n  /**\n   * Torrent upload speed (bytes/second)\n   */\n  up_speed: number;\n}\n\nexport interface TorrentTrackers {\n  /**\n   * Tracker url\n   */\n  url: string;\n  /**\n   * Tracker status. See the table below for possible values\n   */\n  status: TorrentTrackerStatus;\n  /**\n   * Tracker priority tier. Lower tier trackers are tried before higher tiers\n   */\n  tier: number;\n  /**\n   * Number of peers for current torrent, as reported by the tracker\n   */\n  num_peers: number;\n  /**\n   * Number of seeds for current torrent, asreported by the tracker\n   */\n  num_seeds: number;\n  /**\n   * Number of leeches for current torrent, as reported by the tracker\n   */\n  num_leeches: number;\n  /**\n   * Number of completed downlods for current torrent, as reported by the tracker\n   */\n  num_downloaded: number;\n  /**\n   * Tracker message (there is no way of knowing what this message is - it's up to tracker admins)\n   */\n  msg: string;\n}\n\nexport enum TorrentTrackerStatus {\n  /**\n   * Tracker is disabled (used for DHT, PeX, and LSD)\n   */\n  Disabled = 0,\n  /**\n   * Tracker has been contacted and is working\n   */\n  Working = 1,\n  /**\n   * Tracker is currently being updated\n   */\n  Updating = 2,\n  /**\n   * Tracker has been contacted, but it is not working (or doesn't send proper replies)\n   */\n  Errored = 3,\n  /**\n   * Tracker has not been contacted yet\n   */\n  Waiting = 4,\n}\n\nexport interface WebSeed {\n  /**\n   * URL of the web seed\n   */\n  url: string;\n}\n\nexport interface TorrentFile {\n  /**\n   * File name (including relative path)\n   */\n  name: string;\n  /**\n   * File size (bytes)\n   */\n  size: number;\n  /**\n   * File progress (percentage/100)\n   */\n  progress: number;\n  /**\n   * File priority. See possible values here below\n   */\n  priority: number;\n  /**\n   * True if file is seeding/complete\n   */\n  is_seed: boolean;\n  /**\n   * array\tThe first number is the starting piece index and the second number is the ending piece index (inclusive)\n   */\n  piece_range: [number, number];\n  /**\n   * Percentage of file pieces currently available\n   */\n  availability: number;\n}\n\nexport enum TorrentFilePriority {\n  /**\n   * Do not download\n   */\n  Skip = 0,\n  /**\n   * Normal priority\n   */\n  NormalPriority = 1,\n  /**\n   * High priority\n   */\n  HighPriority = 6,\n  /**\n   * Maximal priority\n   */\n  MaxPriority = 7,\n}\n\nexport enum TorrentPieceState {\n  /**\n   * Not downloaded yet\n   */\n  NotDownloaded = 0,\n  /**\n   * Now downloading\n   */\n  Requested = 1,\n  /**\n   * Already downloaded\n   */\n  Downloaded = 2,\n}\n\ntype TrueFalseStr = 'true' | 'false';\n\nexport interface AddTorrentOptions {\n  /**\n   * not totally sure what its for but its required\n   * NOTE: not included in deluge options blob. This should be removed and passed in seperatly.\n   * Added to AddTorrentOptions to make the api's more similar with other clients\n   * default: torrent\n   */\n  filename: string;\n  /**\n   * Download folder\n   */\n  savepath: string;\n  /**\n   * Category for the torrent\n   */\n  category: string;\n  /**\n   * Skip hash checking. Possible values are true, false (default)\n   */\n  skip_checking: TrueFalseStr;\n  /**\n   * Add torrents in the paused state. Possible values are true, false (default)\n   */\n  paused: TrueFalseStr;\n  /**\n   * Create the root folder. Possible values are true, false, unset (default)\n   */\n  root_folder: TrueFalseStr;\n  /**\n   * Rename torrent\n   */\n  rename: string;\n  /**\n   * Set torrent upload speed limit. Unit in bytes/second\n   */\n  upLimit: number;\n  /**\n   * Set torrent download speed limit. Unit in bytes/second\n   */\n  dlLimit: number;\n  /**\n   * Whether Automatic Torrent Management should be used\n   */\n  useAutoTMM: boolean;\n  /**\n   * Enable sequential download. Possible values are true, false (default)\n   */\n  sequentialDownload: TrueFalseStr;\n  /**\n   * Prioritize download first last piece. Possible values are true, false (default)\n   */\n  firstLastPiecePrio: TrueFalseStr;\n}\n"]}